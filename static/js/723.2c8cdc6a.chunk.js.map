{"version":3,"file":"static/js/723.2c8cdc6a.chunk.js","mappings":"6TAIMA,G,QAAU,oCACVC,EAAW,+BAGJC,EAAmB,mCAAG,6GAEJC,EAAAA,EAAAA,IAAA,UAChBF,EADgB,wCACwBD,IAHpB,cAErBI,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAQ3BC,QAAQC,MAAR,OACAC,EAAAA,EAAAA,IAAM,mBATqB,yDAAH,qDAcnBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENR,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCW,IAH1B,cAKQ,KAH/BP,EAFuB,QAKhBC,KAAKC,QAAQM,SACxBH,EAAAA,EAAAA,IAAM,oCANqB,kBAQtBL,EAASC,KAAKC,SARQ,iCAU7BG,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAX6B,yDAAH,sDAejBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAc,EADA,oBACmBf,IAHb,cAEvBI,EAFuB,yBAKtBA,EAASC,MALa,iCAO7BI,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAR6B,yDAAH,sDAYjBG,EAAiB,mCAAG,WAAMD,GAAN,gGAENZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAc,EADA,4BAC2Bf,IAHrB,cAKK,KAH5BI,EAFuB,QAKhBC,KAAKY,KAAKL,SACrBH,EAAAA,EAAAA,IAAM,6BANqB,kBAQtBL,EAASC,KAAKY,MARQ,iCAU7BR,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAX6B,yDAAH,sDAejBK,EAAiB,mCAAG,WAAMH,GAAN,gGAENZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAc,EADA,4BAC2Bf,IAHrB,cAKQ,KAH/BI,EAFuB,QAKhBC,KAAKC,QAAQM,SACxBH,EAAAA,EAAAA,IAAM,+BANqB,kBAQtBL,EAASC,KAAKC,SARQ,iCAU7BG,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAX6B,yDAAH,qD,sKC9DjBM,EAAOC,EAAAA,GAAAA,GAAH,4IASJC,EAAOD,EAAAA,GAAAA,GAAH,sKAUJE,EAAOF,EAAAA,GAAAA,EAAH,uH,SClBJG,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,SAACL,EAAD,UACGK,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QAC1B,OACE,UAACP,EAAD,YACE,SAACC,EAAD,UAAOI,KACP,uBAAIE,MAFKD,EAKd,KAGN,ECID,EAfgB,WACd,IAAQZ,GAAYc,EAAAA,EAAAA,MAAZd,QACR,GAAwCe,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,qGACAhB,EAAAA,EAAAA,IAAkBH,GADlB,OACbV,EADa,OAEnB2B,EAAgB3B,GAFG,2CAAH,qDAIlB6B,GACD,GAAE,CAACnB,KAEG,8BAAGgB,IACV,SAACR,EAAD,CAAaC,QAASO,KACvB,C","sources":["api/fetchAPI.js","components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst API_KEY = 'c318186a7bfc382d3a0a4be08cb03883';\nconst BASE_URL = 'https://api.themoviedb.org/3'; \n\n\nexport const fetchTrendingMovies = async () => {\n      try {\n        const response = await axios.get(\n            `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`\n        );\n        return response.data.results;\n        \n      } catch (error) {\n        console.error(error);\n        toast(\"Something wrong\");\n      }\n};\n  \n\nexport const fetchSearchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      toast(\"Oops...There are no such movies!\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    if (response.data.cast.length === 0) {\n      toast(\"Oops...There are no casts\");\n    }\n    return response.data.cast;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    if (response.data.results.length === 0) {\n      toast(\"Oops...There are no reviews\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n    padding: 20px;\n    background-color: #272727; \n    > p { \n    text-align: center;\n    line-height: 1.5em;\n    font-size: 12px;\n  }\n`;\n\nexport const Name = styled.p`\n  font-weight: 700;\n  padding: 0 10px;\n  text-transform: capitalize;\n  font-size: large;\n\n`;","import { Item, List, Name } from './ReviewsList.styled';\nimport PropTypes from 'prop-types';\n\nexport const ReviewsList = ({ reviews }) => {\n  return (\n    <List>\n      {reviews.map(({ author, id, content }) => {\n        return (\n          <Item key={id}>\n            <Name>{author}</Name>\n            <p>{content}</p>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieReviews } from 'api/fetchAPI';\nimport { ReviewsList } from 'components/ReviewsList/ReviewsList';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const data = await fetchMovieReviews(movieId);\n      setMovieReviews(data);\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return <>{movieReviews && \n  <ReviewsList reviews={movieReviews} />}</>;\n};\nexport default Reviews;\n"],"names":["API_KEY","BASE_URL","fetchTrendingMovies","axios","response","data","results","console","error","toast","fetchSearchMovies","query","length","log","fetchMovieDetails","movieId","fetchMovieCredits","cast","fetchMovieReviews","List","styled","Item","Name","ReviewsList","reviews","map","author","id","content","useParams","useState","movieReviews","setMovieReviews","useEffect","fetchReviews"],"sourceRoot":""}