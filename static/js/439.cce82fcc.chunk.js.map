{"version":3,"file":"static/js/439.cce82fcc.chunk.js","mappings":"6TAIMA,G,QAAU,oCACVC,EAAW,+BAGJC,EAAmB,mCAAG,6GAEJC,EAAAA,EAAAA,IAAA,UAChBF,EADgB,wCACwBD,IAHpB,cAErBI,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAQ3BC,QAAQC,MAAR,OACAC,EAAAA,EAAAA,IAAM,mBATqB,yDAAH,qDAcnBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENR,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCW,IAH1B,cAKQ,KAH/BP,EAFuB,QAKhBC,KAAKC,QAAQM,SACxBH,EAAAA,EAAAA,IAAM,oCANqB,kBAQtBL,EAASC,KAAKC,SARQ,iCAU7BG,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAX6B,yDAAH,sDAejBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAc,EADA,oBACmBf,IAHb,cAEvBI,EAFuB,yBAKtBA,EAASC,MALa,iCAO7BI,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAR6B,yDAAH,sDAYjBG,EAAiB,mCAAG,WAAMD,GAAN,gGAENZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAc,EADA,4BAC2Bf,IAHrB,cAKK,KAH5BI,EAFuB,QAKhBC,KAAKY,KAAKL,SACrBH,EAAAA,EAAAA,IAAM,6BANqB,kBAQtBL,EAASC,KAAKY,MARQ,iCAU7BR,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAX6B,yDAAH,sDAejBK,EAAiB,mCAAG,WAAMH,GAAN,gGAENZ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAc,EADA,4BAC2Bf,IAHrB,cAKQ,KAH/BI,EAFuB,QAKhBC,KAAKC,QAAQM,SACxBH,EAAAA,EAAAA,IAAM,+BANqB,kBAQtBL,EAASC,KAAKC,SARQ,iCAU7BG,EAAAA,EAAAA,IAAM,mBACNF,QAAQM,IAAR,MAX6B,yDAAH,qD,0KC9DjBM,EAAOC,EAAAA,GAAAA,GAAH,2HAQJC,EAAOD,EAAAA,GAAAA,GAAH,sEAIJE,EAAQF,EAAAA,GAAAA,IAAH,+GAOLG,EAAOH,EAAAA,GAAAA,EAAH,qFAMJI,EAAYJ,EAAAA,GAAAA,IAAH,yH,mBCvBTK,EAAW,SAAC,GAAc,IAAZR,EAAW,EAAXA,KACzB,OACE,SAACE,EAAD,UACGF,EAAKS,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,UAACT,EAAD,YACE,SAACC,EAAD,CACES,IACmB,OAAjBJ,EAAA,0CACuCA,GACnCK,EAENC,IAAKJ,KAEP,SAACN,EAAD,UAAOM,KACP,UAACL,EAAD,0BACa,uBAAIM,SAXRF,EAed,KAGN,ECPD,EAfa,WACX,IAAQb,GAAYmB,EAAAA,EAAAA,MAAZnB,QACR,GAAkCoB,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,qGACFvB,EAAAA,EAAAA,IAAkBD,GADhB,OACfV,EADe,OAErBgC,EAAahC,GAFQ,2CAAH,qDAIpBkC,GACD,GAAE,CAACxB,KAEG,8BAAGqB,IAAa,SAACX,EAAD,CAAUR,KAAMmB,KACxC,C","sources":["api/fetchAPI.js","components/Cast/Cast.styled.js","components/Cast/CastList.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst API_KEY = 'c318186a7bfc382d3a0a4be08cb03883';\nconst BASE_URL = 'https://api.themoviedb.org/3'; \n\n\nexport const fetchTrendingMovies = async () => {\n      try {\n        const response = await axios.get(\n            `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`\n        );\n        return response.data.results;\n        \n      } catch (error) {\n        console.error(error);\n        toast(\"Something wrong\");\n      }\n};\n  \n\nexport const fetchSearchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      toast(\"Oops...There are no such movies!\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    if (response.data.cast.length === 0) {\n      toast(\"Oops...There are no casts\");\n    }\n    return response.data.cast;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    if (response.data.results.length === 0) {\n      toast(\"Oops...There are no reviews\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast(\"Something wrong\");\n    console.log(error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    list-style: none; \n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    flex-basis: calc((100% - 7 * 16px) / 8);\n`;\n\nexport const Image = styled.img`\n  width: 140px;\n    height: 140px;\n    margin-bottom: 16px;\n    object-fit: cover;\n`;\n\nexport const Name = styled.p`\n  font-weight: 700;\n  padding: 0 10px;\n  font-size: 12px;\n`;\n\nexport const Character = styled.div`\n  padding: 0 10px;\n  font-size: 10px;\n  p {\n    font-weight: 700;\n    font-size: 12px;\n  }\n`;","import { Character,Name, Image, List, Item} from './Cast.styled';\nimport defaultPicture from '../../images/no-poster.jpg';\nimport PropTypes from 'prop-types';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <List>\n      {cast.map(({ profile_path, cast_id, name, character }) => {\n        return (\n          <Item key={cast_id}>\n            <Image\n              src={\n                profile_path !== null\n                  ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  : defaultPicture\n              }\n              alt={name}\n            />\n            <Name>{name}</Name>\n            <Character>\n              Character: <p>{character}</p>\n            </Character>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      profile_path: PropTypes.string,\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCredits } from 'api/fetchAPI';\nimport { CastList } from 'components/Cast/CastList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      const data = await fetchMovieCredits(movieId);\n      setMovieCast(data);\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return <>{movieCast && <CastList cast={movieCast} />}</>;\n};\n\nexport default Cast;"],"names":["API_KEY","BASE_URL","fetchTrendingMovies","axios","response","data","results","console","error","toast","fetchSearchMovies","query","length","log","fetchMovieDetails","movieId","fetchMovieCredits","cast","fetchMovieReviews","List","styled","Item","Image","Name","Character","CastList","map","profile_path","cast_id","name","character","src","defaultPicture","alt","useParams","useState","movieCast","setMovieCast","useEffect","fetchMovieCast"],"sourceRoot":""}